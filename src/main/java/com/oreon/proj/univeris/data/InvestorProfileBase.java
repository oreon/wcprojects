package com.oreon.proj.univeris.data;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.Date;

import com.google.common.base.Objects;

import javax.persistence.*;
import org.hibernate.validator.*;

import com.google.common.base.Objects;

import org.apache.commons.lang.builder.ReflectionToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;

import org.apache.solr.analysis.LowerCaseFilterFactory;
import org.apache.solr.analysis.SnowballPorterFilterFactory;
import org.apache.solr.analysis.StandardTokenizerFactory;
import org.hibernate.annotations.Cache;
import org.hibernate.annotations.Formula;
import org.hibernate.annotations.CacheConcurrencyStrategy;
import org.hibernate.annotations.Filter;
import org.hibernate.annotations.Filters;
import org.hibernate.annotations.Cascade;

import org.hibernate.search.annotations.AnalyzerDef;
import org.hibernate.search.annotations.Analyzer;
import org.hibernate.search.annotations.Field;
import org.hibernate.search.annotations.Boost;
import org.hibernate.search.annotations.Index;
import org.hibernate.search.annotations.Indexed;
import org.hibernate.search.annotations.Parameter;
import org.hibernate.search.annotations.TokenFilterDef;
import org.hibernate.search.annotations.TokenizerDef;
import org.hibernate.search.annotations.ContainedIn;
import org.hibernate.search.annotations.IndexedEmbedded;

import org.hibernate.annotations.Filter;

import org.hibernate.validator.constraints.*;
import javax.validation.constraints.*;

import java.math.BigDecimal;

import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlTransient;

import org.jboss.seam.annotations.Name;

import org.witchcraft.model.support.audit.Auditable;

import org.witchcraft.utils.*;

import org.witchcraft.base.entity.FileAttachment;
import org.witchcraft.base.entity.BaseEntity;

//Impl 

/**
 * This file is generated by Witchcraftmda.
 * DO NOT MODIFY any changes will be overwritten with the next run of the code generator.
 *
 */

/**
 * 
 *
 */

@MappedSuperclass
public class InvestorProfileBase extends BaseEntity {
	private static final long serialVersionUID = 1062433502L;

	@Column(unique = false)
	@Field(index = Index.YES)
	@Analyzer(definition = "entityAnalyzer")
	protected String nameEng

	;

	@Column(unique = false)
	@Field(index = Index.YES)
	@Analyzer(definition = "entityAnalyzer")
	protected String nameFre

	;

	@Lob
	@Column(unique = false)
	@Field(index = Index.YES)
	@Analyzer(definition = "entityAnalyzer")
	protected String descEng

	;

	@Lob
	@Column(unique = false)
	@Field(index = Index.YES)
	@Analyzer(definition = "entityAnalyzer")
	protected String descFre

	;

	@Column(unique = false)
	@Field(index = Index.YES)
	@Analyzer(definition = "entityAnalyzer")
	protected String imageFileUri

	;

	@Column(unique = false)
	protected Integer conservativeOrder

	;

	public void setNameEng(String nameEng) {
		this.nameEng = nameEng;
	}

	public String getNameEng() {

		return nameEng;

	}

	public void setNameFre(String nameFre) {
		this.nameFre = nameFre;
	}

	public String getNameFre() {

		return nameFre;

	}

	public void setDescEng(String descEng) {
		this.descEng = descEng;
	}

	public String getDescEng() {

		return descEng;

	}

	public void setDescFre(String descFre) {
		this.descFre = descFre;
	}

	public String getDescFre() {

		return descFre;

	}

	public void setImageFileUri(String imageFileUri) {
		this.imageFileUri = imageFileUri;
	}

	public String getImageFileUri() {

		return imageFileUri;

	}

	public void setConservativeOrder(Integer conservativeOrder) {
		this.conservativeOrder = conservativeOrder;
	}

	public Integer getConservativeOrder() {

		return conservativeOrder;

	}

	@Transient
	public String getDisplayName() {
		try {
			return nameEng;
		} catch (Exception e) {
			return "Exception - " + e.getMessage();
		}
	}

	@Transient
	public String getDescEngAbbreviated() {
		try {
			return org.apache.commons.lang.WordUtils.abbreviate(descEng.trim(),
					100, 200, "...");
		} catch (Exception e) {
			return descEng != null ? descEng : "";
		}
	}

	@Transient
	public String getDescFreAbbreviated() {
		try {
			return org.apache.commons.lang.WordUtils.abbreviate(descFre.trim(),
					100, 200, "...");
		} catch (Exception e) {
			return descFre != null ? descFre : "";
		}
	}

	//Empty setter , needed for richfaces autocomplete to work 
	public void setDisplayName(String name) {
	}

	/** This method is used by hibernate full text search - override to add additional fields
	 * @see org.witchcraft.model.support.BaseEntity#retrieveSearchableFieldsArray()
	 */
	@Override
	public List<String> listSearchableFields() {
		List<String> listSearchableFields = new ArrayList<String>();
		listSearchableFields.addAll(super.listSearchableFields());

		listSearchableFields.add("nameEng");

		listSearchableFields.add("nameFre");

		listSearchableFields.add("descEng");

		listSearchableFields.add("descFre");

		listSearchableFields.add("imageFileUri");

		return listSearchableFields;
	}

	@Field(index = Index.YES, name = "searchData")
	@Analyzer(definition = "entityAnalyzer")
	public String getSearchData() {
		StringBuilder builder = new StringBuilder();

		builder.append(getNameEng() + " ");

		builder.append(getNameFre() + " ");

		builder.append(getDescEng() + " ");

		builder.append(getDescFre() + " ");

		builder.append(getImageFileUri() + " ");

		return builder.toString();
	}

	/*
	
	 */

}
